I"6]<h1 id="yymemorycache-源码分析">YYMemoryCache 源码分析</h1>

<h4 id="yymemorycache是内存缓存所以存取速度非常快主要用到两种数据结构的lru淘汰算法">YYMemoryCache是内存缓存，所以存取速度非常快，主要用到两种数据结构的LRU淘汰算法</h4>

<ol>
  <li>
    <p>LRU淘汰算法</p>

    <blockquote>
      <p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>

      <p>最常见的实现是使用一个链表保存缓存数据</p>

      <p>【命中率】</p>

      <p>当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。</p>

      <p>Cache的容量是有限的，当Cache的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律</p>
    </blockquote>
  </li>
  <li>
    <p>数据结构</p>

    <ul>
      <li>双向链表 (Doubly Linked List)</li>
      <li>哈希表 (Dictionary)</li>
    </ul>
  </li>
  <li>
    <p>缓存操作</p>

    <ul>
      <li>新数据插入到链表头部；</li>
      <li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li>
      <li>当链表满的时候，将链表尾部的数据丢弃。</li>
    </ul>
  </li>
  <li>
    <p>分析图</p>

    <p><a href="https://cuntuku.com/image/bpM38"><img src="https://storage6.cuntuku.com/2019/04/27/bpM38.png" alt="bpM38.png" /></a></p>
  </li>
  <li>
    <p>YYMemoryCache.m里的两个分类</p>

    <ol>
      <li>
        <p>链表节点 <code class="highlighter-rouge">_YYLinkedMapNode</code></p>

        <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">_YYLinkedMapNode</span> <span class="p">:</span> <span class="nc">NSObject</span> <span class="p">{</span>
    <span class="err">@package</span>
    <span class="c1">// 指向前一个节点</span>
    <span class="n">__unsafe_unretained</span> <span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="n">_prev</span><span class="p">;</span> <span class="c1">// retained by dic</span>
    <span class="c1">// 指向后一个节点</span>
    <span class="n">__unsafe_unretained</span> <span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="n">_next</span><span class="p">;</span> <span class="c1">// retained by dic</span>
    <span class="c1">// 缓存key</span>
    <span class="n">id</span> <span class="n">_key</span><span class="p">;</span>
    <span class="c1">// 缓存对象</span>
    <span class="n">id</span> <span class="n">_value</span><span class="p">;</span>
    <span class="c1">// 当前缓存内存开销</span>
    <span class="n">NSUInteger</span> <span class="n">_cost</span><span class="p">;</span>
    <span class="c1">// 缓存时间</span>
    <span class="n">NSTimeInterval</span> <span class="n">_time</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>链表 <code class="highlighter-rouge">_YYLinkedMap</code></p>

        <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">_YYLinkedMap</span> <span class="p">:</span> <span class="nc">NSObject</span> <span class="p">{</span>
    <span class="err">@package</span>
    <span class="c1">// 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c)</span>
    <span class="n">CFMutableDictionaryRef</span> <span class="n">_dic</span><span class="p">;</span>
    <span class="c1">// 总缓存开销</span>
    <span class="n">NSUInteger</span> <span class="n">_totalCost</span><span class="p">;</span>
    <span class="c1">// 总缓存数量</span>
    <span class="n">NSUInteger</span> <span class="n">_totalCount</span><span class="p">;</span>
    <span class="c1">// 链表头节点</span>
    <span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="n">_head</span><span class="p">;</span>
    <span class="c1">// 链表尾节点</span>
    <span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="n">_tail</span><span class="p">;</span>
    <span class="c1">// 是否在主线程上，异步释放 _YYLinkedMapNode对象</span>
    <span class="n">BOOL</span> <span class="n">_releaseOnMainThread</span><span class="p">;</span>
    <span class="c1">// 是否异步释放 _YYLinkedMapNode对象</span>
    <span class="n">BOOL</span> <span class="n">_releaseAsynchronously</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 添加节点到链表头节点</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertNodeAtHead</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span><span class="p">;</span>
<span class="c1">// 移动当前节点到链表头节点</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bringNodeToHead</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span><span class="p">;</span>
<span class="c1">// 移除链表节点</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeNode</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span><span class="p">;</span>
<span class="c1">// 移除链表尾节点(如果存在)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="n">removeTailNode</span><span class="p">;</span>
<span class="c1">// 移除所有缓存</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeAll</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>
    <p>链表插入、查找、替换操作实现</p>

    <ul>
      <li>
        <p>添加节点到链表头节点</p>

        <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 添加节点到链表头节点</span>
 <span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertNodeAtHead</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span> <span class="p">{</span>
     <span class="c1">// 哈希表保存链表节点node</span>
     <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">_dic</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">_key</span><span class="p">),</span> <span class="p">(</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">node</span><span class="p">));</span>
     <span class="c1">// 叠加该缓存开销到总内存开销</span>
     <span class="n">_totalCost</span> <span class="o">+=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_cost</span><span class="p">;</span>
     <span class="c1">// 总缓存数+1</span>
     <span class="n">_totalCount</span><span class="o">++</span><span class="p">;</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">_head</span><span class="p">)</span> <span class="p">{</span>
         <span class="c1">// 存在链表头，取代当前表头</span>
         <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="n">_head</span><span class="p">;</span>
         <span class="n">_head</span><span class="o">-&gt;</span><span class="n">_prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
         <span class="c1">// 重新赋值链表表头临时变量_head</span>
         <span class="n">_head</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
         <span class="c1">// 不存在链表头</span>
         <span class="n">_head</span> <span class="o">=</span> <span class="n">_tail</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div>        </div>

        <p><img src="https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png" alt="" /></p>
      </li>
      <li>
        <p>移动当前节点到链表头节点</p>

        <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 移动当前节点到链表头节点</span>
 <span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bringNodeToHead</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span> <span class="p">{</span>
     <span class="c1">// 当前节点已是链表头节点</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">_head</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
      
     <span class="k">if</span> <span class="p">(</span><span class="n">_tail</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
         <span class="c1">//**如果node是链表尾节点**</span>
      
         <span class="c1">// 把node指向的上一个节点赋值给链表尾节点</span>
         <span class="n">_tail</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">;</span>
         <span class="c1">// 把链表尾节点指向的下一个节点赋值nil</span>
         <span class="n">_tail</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
         <span class="c1">//**如果node是非链表尾节点和链表头节点**</span>
         <span class="c1">// 此处比较难以理解：总结如下</span>
         <span class="c1">// 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev)</span>
         <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="o">-&gt;</span><span class="n">_prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">;</span>
         <span class="c1">// 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next)</span>
         <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="p">;</span>
         <span class="c1">// 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接</span>
     <span class="p">}</span>
     <span class="c1">// 把链表头节点赋值给node指向的下一个节点</span>
     <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="n">_head</span><span class="p">;</span>
     <span class="c1">// 把node指向的上一个节点赋值nil</span>
     <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
     <span class="c1">// 把节点赋值给链表头节点的指向的上一个节点</span>
     <span class="n">_head</span><span class="o">-&gt;</span><span class="n">_prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
     <span class="n">_head</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
 <span class="p">}</span>
      
</code></pre></div>        </div>

        <p><img src="https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png" alt="" /></p>
      </li>
      <li>
        <p>移除节点</p>

        <ul>
          <li>
            <p>移除指定节点</p>

            <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 移除节点</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeNode</span><span class="p">:(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">node</span> <span class="p">{</span>
    <span class="c1">// 从字典中移除node</span>
    <span class="n">CFDictionaryRemoveValue</span><span class="p">(</span><span class="n">_dic</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">_key</span><span class="p">));</span>
    <span class="c1">// 减掉总内存消耗</span>
    <span class="n">_totalCost</span> <span class="o">-=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_cost</span><span class="p">;</span>
    <span class="c1">// // 总缓存数-1</span>
    <span class="n">_totalCount</span><span class="o">--</span><span class="p">;</span>
    <span class="c1">// 重新连接链表(看图分析吧)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="p">)</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="o">-&gt;</span><span class="n">_prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">)</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_head</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="n">_head</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_next</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_tail</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="n">_tail</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>移除尾节点</p>

            <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 移除尾节点(如果存在)</span>
 <span class="k">-</span> <span class="p">(</span><span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="p">)</span><span class="n">removeTailNode</span> <span class="p">{</span>
     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_tail</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
     <span class="c1">// 拷贝一份要删除的尾节点指针</span>
     <span class="n">_YYLinkedMapNode</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="n">_tail</span><span class="p">;</span>
     <span class="c1">// 移除链表尾节点</span>
     <span class="n">CFDictionaryRemoveValue</span><span class="p">(</span><span class="n">_dic</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">_tail</span><span class="o">-&gt;</span><span class="n">_key</span><span class="p">));</span>
     <span class="c1">// 减掉总内存消耗</span>
     <span class="n">_totalCost</span> <span class="o">-=</span> <span class="n">_tail</span><span class="o">-&gt;</span><span class="n">_cost</span><span class="p">;</span>
     <span class="c1">// 总缓存数-1</span>
     <span class="n">_totalCount</span><span class="o">--</span><span class="p">;</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">_head</span> <span class="o">==</span> <span class="n">_tail</span><span class="p">)</span> <span class="p">{</span>
         <span class="c1">// 清除节点，链表上已无节点了</span>
         <span class="n">_head</span> <span class="o">=</span> <span class="n">_tail</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
         <span class="c1">// 设倒数第二个节点为链表尾节点</span>
         <span class="n">_tail</span> <span class="o">=</span> <span class="n">_tail</span><span class="o">-&gt;</span><span class="n">_prev</span><span class="p">;</span>
         <span class="n">_tail</span><span class="o">-&gt;</span><span class="n">_next</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
     <span class="p">}</span>
     <span class="c1">// 返回完tail后_tail将会释放</span>
     <span class="k">return</span> <span class="n">tail</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>移除所有缓存</p>

            <div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 移除所有缓存</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeAll</span> <span class="p">{</span>
    <span class="c1">// 清空内存开销与缓存数量</span>
    <span class="n">_totalCost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">_totalCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// 清空头尾节点</span>
    <span class="n">_head</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="n">_tail</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
        
    <span class="k">if</span> <span class="p">(</span><span class="n">CFDictionaryGetCount</span><span class="p">(</span><span class="n">_dic</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 拷贝一份字典</span>
        <span class="n">CFMutableDictionaryRef</span> <span class="n">holder</span> <span class="o">=</span> <span class="n">_dic</span><span class="p">;</span>
        <span class="c1">// 重新分配新的空间</span>
        <span class="n">_dic</span> <span class="o">=</span> <span class="n">CFDictionaryCreateMutable</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryKeyCallBacks</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">_releaseAsynchronously</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 异步释放缓存</span>
            <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">_releaseOnMainThread</span> <span class="p">?</span> <span class="n">dispatch_get_main_queue</span><span class="p">()</span> <span class="p">:</span> <span class="n">YYMemoryCacheGetReleaseQueue</span><span class="p">();</span>
            <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
                <span class="n">CFRelease</span><span class="p">(</span><span class="n">holder</span><span class="p">);</span> <span class="c1">// hold and release in specified queue</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_releaseOnMainThread</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pthread_main_np</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// 主线程上释放缓存</span>
            <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                <span class="n">CFRelease</span><span class="p">(</span><span class="n">holder</span><span class="p">);</span> <span class="c1">// hold and release in specified queue</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 同步释放缓存</span>
            <span class="n">CFRelease</span><span class="p">(</span><span class="n">holder</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>图片引用自<a href="https://www.jianshu.com/p/492c3c3a0485">YYCache源码分析(二)</a> 感谢作者</p>

  <p>ps未完待续……</p>
</blockquote>
:ET